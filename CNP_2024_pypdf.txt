import markdown2

def write_to_html(indices,prompts_, cr, outputs_azure, outputs_pypdf,  outputs_llm ,sources_azure, sources_pypdf, sources_llm, filename="exemple_sanofi.html"):
    if len(indices) == len(prompts_) == len(cr) == len(outputs_azure) == len(outputs_pypdf) == len(sources_azure) == len(sources_pypdf):
        html_content = """
        <!DOCTYPE html>
        <html lang="fr">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Résultats CNP</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                th, td { border: 1px solid black; padding: 10px; text-align: left; vertical-align: top; }
                th { background-color: #f2f2f2; }
                .question { color: blue; font-weight: bold; }
                .context { color: green; }
                .answer_pypdf { color: purple; }
                .answer_azure { color: red; }
                .answer_llm { color: brown; }
                .source-list { display: none; margin-top: 10px; font-style: italic; font-size: 0.9em; color: gray; }
                .source-title { font-weight: bold; }
                .show-sources { color: blue; cursor: pointer; }
            </style>
            <script>
                function toggleSources(id) {
                    var sources = document.getElementById(id);
                    if (sources.style.display === "none") {
                        sources.style.display = "block";
                    } else {
                        sources.style.display = "none";
                    }
                }
            </script>
        </head>
        <body>
            <h2>Rapport CNP</h2>
            <table>
                <tr>
                    <th> Idx </th>
                    <th>Question</th>
                    <th>Instructions</th>
                    <th>Answer Solution LLM (GPT4o)</th>
                    <th>Answer Solution PyPDF</th>
                    <th>Answer Solution Azure</th>
                </tr>
        """

        def convert_markdown(text):
            """Convertit Markdown en HTML avec support des tableaux."""
            if text is None:
                return "None"
            return markdown2.markdown(str(text), extras=["tables"])  # Activation du support des tableaux

        for ind, q, c, s_azure, s_pypdf, s_llm, src_pypdf, src_azure,src_llm in zip(indices,prompts_, cr, outputs_azure, outputs_pypdf, outputs_llm, sources_azure, sources_pypdf, sources_llm):
            # Generate a unique ID for each question based on index and a short version of the question
            unique_id_pypdf = f"sources-pypdf-{ind}-{q[:10].replace(' ', '_')}"
            unique_id_azure = f"sources-azure-{ind}-{q[:10].replace(' ', '_')}"
            unique_id_llm = f"sources-llm-{ind}-{q[:10].replace(' ', '_')}"

            # Generating HTML for each row with the sources and the button
            html_content += f"""
                <tr>
                    <td class="question">{ind}</td>    
                    <td class="question">{convert_markdown(q)}</td>
                    <td class="context">{convert_markdown(c)}</td>
                    
                    <td class="answer_llm">
                        {convert_markdown(s_llm)}
                        <br>
                        <span class="show-sources" onclick="toggleSources('{unique_id_llm}')">Afficher les sourcesLLM</span>
                        <div class="source-list" id="{unique_id_llm}">
                            <div class="source-title">Sources LLM :</div>
                            <ul>
{''.join(
    f'<li>{source.page_content} ' 
    f'{"and " + convert_markdown(source.metadata["table"]) if "table" in source.metadata else  source.page_content}</li>'
    for source in src_llm['context'])
}                            </ul>
                        </div>
                    </td>
                    
                    
                    
                    <td class="answer_pypdf">
                        {convert_markdown(s_pypdf)}
                        <br>
                        <span class="show-sources" onclick="toggleSources('{unique_id_pypdf}')">Afficher les sources Pypdf</span>
                        <div class="source-list" id="{unique_id_pypdf}">
                            <div class="source-title">Sources Pypdf :</div>
                            <ul>
                                {''.join(f'<li>{source.page_content}</li>' for source in src_pypdf['context'])} <!-- Ensure src_pypdf is a list -->
                            </ul>
                        </div>
                    </td>
                    <td class="answer_azure">
                        {convert_markdown(s_azure)}
                        <br>
                        <span class="show-sources" onclick="toggleSources('{unique_id_azure}')">Afficher les sources Azure</span>
                        <div class="source-list" id="{unique_id_azure}">
                            <div class="source-title">Sources Azure :</div>
                            <ul>
{''.join(
    f'<li>{source.page_content} ' 
    f'{"and " + convert_markdown(source.metadata["table"]) if "table" in source.metadata else  source.page_content}</li>'
    for source in src_azure['context'])
}                            </ul>
                        </div>
                    </td>
                </tr>
            """

        html_content += """
            </table>
        </body>
        </html>
        """

        with open(filename, "w", encoding="utf-8") as file:
            file.write(html_content)

        print(f"Fichier HTML '{filename}' créé avec succès.")
    else:
        print("Erreur : Les listes doivent avoir la même longueur.")
