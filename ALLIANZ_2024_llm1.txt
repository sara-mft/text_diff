import os
import json

# Charger les données depuis le fichier JSON
with open('data_1.json', 'r', encoding='utf-8') as file:
    data = json.load(file)

    
# Créer un répertoire pour stocker les fichiers texte individuels
output_dir = "output_texts_1"
os.makedirs(output_dir, exist_ok=True)

# Initialiser les structures pour le fichier JSON au format Azure
azure_format = {
    "projectFileVersion": "2022-10-01-preview",
    "stringIndexType": "Utf16CodeUnit",
    "metadata": {
        "projectKind": "CustomMultiLabelClassification",
        "storageInputContainerName": "container-",
        "projectName": "test-assClient",
        "multilingual": False,
        "description": "",
        "language": "fr"
    },
    "assets": {
        "classes": [],
        "documents": []
    }
}

# Ajouter les classes dans le format Azure
classes = set()
for item in data['data']:
    classes.add(item['class'])
    azure_format['assets']['classes'].append({"category": item['class']})

# Traiter chaque question et générer les fichiers texte
file_counter = 1
for item in data["data"]:
    class_name = item['class']
    for question in item['questions']:
        # Nom du fichier
        file_name = f"example{file_counter}.txt"
        file_path = os.path.join(output_dir, file_name)

        # Créer le fichier texte pour l'exemple
        with open(file_path, 'w', encoding='utf-8') as text_file:
            text_file.write(question)

        # Ajouter le document au format Azure
        azure_format['assets']['documents'].append({
            "location": file_name,
            "language": "fr-fr",
            "classes": [{"category": class_name}]
        })

        file_counter += 1

# Sauvegarder le fichier JSON au format Azure
with open('azure_project_1.json', 'w', encoding='utf-8') as azure_file:
    json.dump(azure_format, azure_file, ensure_ascii=False, indent=4)

print("Conversion terminée. Les fichiers texte et le fichier JSON sont générés.")
